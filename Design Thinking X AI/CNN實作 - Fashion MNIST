{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from keras.datasets import fashion_mnist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "(x_train, y_train), (x_test, y_test)  = fashion_mnist.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1a4a97b6f28>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_train[1234], cmap = 'Greys')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = x_train.reshape(60000, 28, 28, 1)\n",
    "x_test = x_test.reshape(10000, 28, 28, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = x_train/255\n",
    "x_test = x_test/255"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.utils import to_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train = to_categorical(y_train, 10)\n",
    "y_test = to_categorical(y_test, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Activation\n",
    "from keras.optimizers import SGD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1st Conv Layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Conv2D(8, (3,3), padding = 'same', activation = 'relu', input_shape = (28, 28, 1)))\n",
    "model.add(Conv2D(8, (3,3), padding = 'same', activation = 'relu'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(MaxPool2D(pool_size = (2,2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2nd Conv Layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Conv2D(16, (3,3), padding = 'same', activation = 'relu'))\n",
    "model.add(Conv2D(16, (3,3), padding = 'same', activation = 'relu'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(MaxPool2D(pool_size = (2,2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3rd Conv Layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Conv2D(32, (3,3), padding = 'same', activation = 'relu'))\n",
    "model.add(Conv2D(32, (3,3), padding = 'same', activation = 'relu'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(MaxPool2D(pool_size = (2,2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Flatten"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Flatten())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Dense(256, activation = 'relu'))\n",
    "model.add(Dense(256, activation = 'relu'))\n",
    "model.add(Dense(10, activation = 'softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss=\"mse\", optimizer=SGD(lr=0.05),\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_1 (Conv2D)            (None, 28, 28, 8)         80        \n",
      "_________________________________________________________________\n",
      "conv2d_2 (Conv2D)            (None, 28, 28, 8)         584       \n",
      "_________________________________________________________________\n",
      "max_pooling2d_1 (MaxPooling2 (None, 14, 14, 8)         0         \n",
      "_________________________________________________________________\n",
      "conv2d_3 (Conv2D)            (None, 14, 14, 16)        1168      \n",
      "_________________________________________________________________\n",
      "conv2d_4 (Conv2D)            (None, 14, 14, 16)        2320      \n",
      "_________________________________________________________________\n",
      "max_pooling2d_2 (MaxPooling2 (None, 7, 7, 16)          0         \n",
      "_________________________________________________________________\n",
      "conv2d_5 (Conv2D)            (None, 7, 7, 32)          4640      \n",
      "_________________________________________________________________\n",
      "conv2d_6 (Conv2D)            (None, 7, 7, 32)          9248      \n",
      "_________________________________________________________________\n",
      "max_pooling2d_3 (MaxPooling2 (None, 3, 3, 32)          0         \n",
      "_________________________________________________________________\n",
      "flatten_1 (Flatten)          (None, 288)               0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 256)               73984     \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 256)               65792     \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 10)                2570      \n",
      "=================================================================\n",
      "Total params: 160,386\n",
      "Trainable params: 160,386\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "60000/60000 [==============================] - 34s 563us/step - loss: 0.0899 - acc: 0.1007\n",
      "Epoch 2/20\n",
      "60000/60000 [==============================] - 31s 514us/step - loss: 0.0898 - acc: 0.1118\n",
      "Epoch 3/20\n",
      "60000/60000 [==============================] - 36s 603us/step - loss: 0.0897 - acc: 0.1563\n",
      "Epoch 4/20\n",
      "60000/60000 [==============================] - 27s 449us/step - loss: 0.0894 - acc: 0.22990s - loss: 0.0894 - acc: - ETA: 0s - loss: 0.0894 - acc: 0.2\n",
      "Epoch 5/20\n",
      "60000/60000 [==============================] - 26s 439us/step - loss: 0.0888 - acc: 0.30422s \n",
      "Epoch 6/20\n",
      "60000/60000 [==============================] - 30s 499us/step - loss: 0.0788 - acc: 0.3848\n",
      "Epoch 7/20\n",
      "60000/60000 [==============================] - 33s 557us/step - loss: 0.0483 - acc: 0.6411\n",
      "Epoch 8/20\n",
      "60000/60000 [==============================] - 27s 450us/step - loss: 0.0394 - acc: 0.7086\n",
      "Epoch 9/20\n",
      "60000/60000 [==============================] - 34s 572us/step - loss: 0.0366 - acc: 0.7341\n",
      "Epoch 10/20\n",
      "60000/60000 [==============================] - 36s 597us/step - loss: 0.0345 - acc: 0.7503\n",
      "Epoch 11/20\n",
      "60000/60000 [==============================] - 34s 571us/step - loss: 0.0328 - acc: 0.7654\n",
      "Epoch 12/20\n",
      "60000/60000 [==============================] - 33s 558us/step - loss: 0.0313 - acc: 0.7780\n",
      "Epoch 13/20\n",
      "60000/60000 [==============================] - 40s 673us/step - loss: 0.0306 - acc: 0.7848\n",
      "Epoch 14/20\n",
      "60000/60000 [==============================] - 38s 633us/step - loss: 0.0293 - acc: 0.7937\n",
      "Epoch 15/20\n",
      "60000/60000 [==============================] - 39s 655us/step - loss: 0.0285 - acc: 0.8010\n",
      "Epoch 16/20\n",
      "60000/60000 [==============================] - 38s 637us/step - loss: 0.0276 - acc: 0.80820s - loss: 0.0276 - \n",
      "Epoch 17/20\n",
      "60000/60000 [==============================] - 39s 651us/step - loss: 0.0269 - acc: 0.81351s - loss\n",
      "Epoch 18/20\n",
      "60000/60000 [==============================] - 40s 671us/step - loss: 0.0257 - acc: 0.8207\n",
      "Epoch 19/20\n",
      "60000/60000 [==============================] - 42s 704us/step - loss: 0.0253 - acc: 0.8235\n",
      "Epoch 20/20\n",
      "60000/60000 [==============================] - 35s 578us/step - loss: 0.0247 - acc: 0.8297\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a4a6368d68>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train, batch_size=100, epochs=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "60000/60000 [==============================] - 45s 753us/step - loss: 0.0242 - acc: 0.83341s - lo\n",
      "Epoch 2/20\n",
      "60000/60000 [==============================] - 43s 708us/step - loss: 0.0236 - acc: 0.83672s\n",
      "Epoch 3/20\n",
      "60000/60000 [==============================] - 36s 608us/step - loss: 0.0234 - acc: 0.83830s - loss: 0.0234 \n",
      "Epoch 4/20\n",
      "60000/60000 [==============================] - 37s 620us/step - loss: 0.0227 - acc: 0.8442\n",
      "Epoch 5/20\n",
      "60000/60000 [==============================] - 38s 640us/step - loss: 0.0226 - acc: 0.84491s - los\n",
      "Epoch 6/20\n",
      "60000/60000 [==============================] - 41s 685us/step - loss: 0.0222 - acc: 0.8473\n",
      "Epoch 7/20\n",
      "60000/60000 [==============================] - 44s 732us/step - loss: 0.0219 - acc: 0.8504\n",
      "Epoch 8/20\n",
      "60000/60000 [==============================] - 42s 701us/step - loss: 0.0217 - acc: 0.8522\n",
      "Epoch 9/20\n",
      "60000/60000 [==============================] - 68s 1ms/step - loss: 0.0211 - acc: 0.8550: 2s - loss\n",
      "Epoch 10/20\n",
      "60000/60000 [==============================] - 48s 794us/step - loss: 0.0209 - acc: 0.8579\n",
      "Epoch 11/20\n",
      "60000/60000 [==============================] - 41s 687us/step - loss: 0.0207 - acc: 0.8576\n",
      "Epoch 12/20\n",
      "60000/60000 [==============================] - 38s 626us/step - loss: 0.0204 - acc: 0.8598\n",
      "Epoch 13/20\n",
      "60000/60000 [==============================] - 36s 601us/step - loss: 0.0201 - acc: 0.86320s - loss: 0.0201 - acc\n",
      "Epoch 14/20\n",
      "60000/60000 [==============================] - 38s 627us/step - loss: 0.0200 - acc: 0.8645\n",
      "Epoch 15/20\n",
      "60000/60000 [==============================] - 38s 631us/step - loss: 0.0197 - acc: 0.8671\n",
      "Epoch 16/20\n",
      "60000/60000 [==============================] - 39s 655us/step - loss: 0.0197 - acc: 0.8665\n",
      "Epoch 17/20\n",
      "60000/60000 [==============================] - 38s 632us/step - loss: 0.0195 - acc: 0.8688\n",
      "Epoch 18/20\n",
      "60000/60000 [==============================] - 38s 625us/step - loss: 0.0193 - acc: 0.87012s - loss: 0.0192 - acc: 0.\n",
      "Epoch 19/20\n",
      "60000/60000 [==============================] - 40s 665us/step - loss: 0.0192 - acc: 0.8705\n",
      "Epoch 20/20\n",
      "60000/60000 [==============================] - 39s 647us/step - loss: 0.0189 - acc: 0.8729\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a4a6494c88>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train, batch_size=100, epochs=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "60000/60000 [==============================] - 40s 661us/step - loss: 0.0188 - acc: 0.8734\n",
      "Epoch 2/20\n",
      "60000/60000 [==============================] - 36s 598us/step - loss: 0.0186 - acc: 0.8755\n",
      "Epoch 3/20\n",
      "60000/60000 [==============================] - 36s 605us/step - loss: 0.0187 - acc: 0.8741\n",
      "Epoch 4/20\n",
      "60000/60000 [==============================] - 38s 626us/step - loss: 0.0184 - acc: 0.8764\n",
      "Epoch 5/20\n",
      "60000/60000 [==============================] - 36s 598us/step - loss: 0.0183 - acc: 0.87813s - loss: 0.0183 - ac - ETA: 2s - loss: 0.0183 - acc - ETA: 2s - loss - ETA: 0s - loss: 0.0184 - acc: 0.877 - ETA: 0s - loss: 0.0184 - a\n",
      "Epoch 6/20\n",
      "60000/60000 [==============================] - 37s 612us/step - loss: 0.0182 - acc: 0.8792\n",
      "Epoch 7/20\n",
      "60000/60000 [==============================] - 37s 621us/step - loss: 0.0182 - acc: 0.8775\n",
      "Epoch 8/20\n",
      "60000/60000 [==============================] - 41s 676us/step - loss: 0.0181 - acc: 0.8783\n",
      "Epoch 9/20\n",
      "60000/60000 [==============================] - 37s 620us/step - loss: 0.0181 - acc: 0.8792\n",
      "Epoch 10/20\n",
      "60000/60000 [==============================] - 38s 634us/step - loss: 0.0179 - acc: 0.8819\n",
      "Epoch 11/20\n",
      "60000/60000 [==============================] - 39s 654us/step - loss: 0.0180 - acc: 0.8808\n",
      "Epoch 12/20\n",
      "60000/60000 [==============================] - 37s 623us/step - loss: 0.0181 - acc: 0.8799\n",
      "Epoch 13/20\n",
      "60000/60000 [==============================] - 39s 645us/step - loss: 0.0180 - acc: 0.8820\n",
      "Epoch 14/20\n",
      "60000/60000 [==============================] - 41s 686us/step - loss: 0.0180 - acc: 0.8820\n",
      "Epoch 15/20\n",
      "60000/60000 [==============================] - 38s 632us/step - loss: 0.0179 - acc: 0.8818\n",
      "Epoch 16/20\n",
      "60000/60000 [==============================] - 41s 678us/step - loss: 0.0178 - acc: 0.8822\n",
      "Epoch 17/20\n",
      "60000/60000 [==============================] - 38s 635us/step - loss: 0.0178 - acc: 0.8839\n",
      "Epoch 18/20\n",
      "60000/60000 [==============================] - 39s 653us/step - loss: 0.0181 - acc: 0.88160s - loss: 0.0181 - acc: 0.8\n",
      "Epoch 19/20\n",
      "60000/60000 [==============================] - 41s 690us/step - loss: 0.0182 - acc: 0.8811\n",
      "Epoch 20/20\n",
      "60000/60000 [==============================] - 44s 736us/step - loss: 0.0182 - acc: 0.8820\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a4a64c1ef0>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train, batch_size=100, epochs=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000/10000 [==============================] - 5s 450us/step\n",
      "正確率為: 0.8548 ，loss為 0.02 \n"
     ]
    }
   ],
   "source": [
    "score = model.evaluate(x_test, y_test)\n",
    "print(f\"正確率為: {score[1]} ，loss為 {score[0]:.2f} \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "predict = model.predict_classes(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "class_names = ['T-shirt/top', 'Trousers' , 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pick = np.random.randint(1,9999, 5)\n",
    "\n",
    "for i in range(5):\n",
    "    plt.subplot(1,5,i+1)\n",
    "    plt.imshow(x_test[pick[i]].reshape(28,28), cmap='Greys')\n",
    "    plt.title(class_names[predict[pick[i]]])\n",
    "    plt.axis(\"off\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
